/home/sam/github/ml-software-engineers-gym
├── custom_tree_and_files_corrected.txt
├── .gitignore
├── problems-solving
│   └── data-structures-and-algorithms
│       └── 5-arrays
│           ├── problem-1
│           │   └── solution.py
│           ├── problem-2
│           │   └── solution.py
│           └── problem-3
│               ├── my_solution.py
│               ├── solution.py
│               └── test_helper.py
├── questions-and-answers
└── README.md

8 directories, 8 files


=== Content of /home/sam/github/ml-software-engineers-gym/problems-solving/data-structures-and-algorithms/5-arrays/problem-3/solution.py ===

"""
Problem Statement:

Certain applications require arbitrary precision arithmetic. One way to achieve this
is to use arrays to represent integers. Each array entry represents a digit, with the
most significant digit appearing first. A negative leading digit denotes a negative integer.

For example, the sequence [1, 9, 3, 7, 0, 7, 7, 2, 1] represents the number 193707721, and
the sequence [-7, 6, 1, 8, 3, 8, 2, 5, 7, 2, 8, 7] represents the number -761838257287.

The task is to write a program that takes two arrays representing integers and returns
an integer representing their product.

Example:
    If the inputs are [1, 9, 3, 7, 0, 7, 7, 2, 1] and [-7, 6, 1, 8, 3, 8, 2, 5, 7, 2, 8, 7],
    your function should return [-1, 4, 7, 5, 7, 3, 9, 5, 2, 5, 8, 9, 6, 7, 6, 4, 1, 2, 9, 2, 7],
    since 193707721 * -761838257287 = -147573952589676412927.

"""


def solution(num1, num2):
    # Determine the sign of the result
    sign = -1 if (num1[0] < 0) ^ (num2[0] < 0) else 1

    # Take the absolute value of the first digit (which could be negative)
    num1[0], num2[0] = abs(num1[0]), abs(num2[0])

    # Initialize the result list with zeros
    result = [0] * (len(num1) + len(num2))

    # Multiply each digit of num1 with each digit of num2
    for i in reversed(range(len(num1))):
        for j in reversed(range(len(num2))):
            result[i + j + 1] += num1[i] * num2[j]
            result[i + j] += result[i + j + 1] // 10
            result[i + j + 1] %= 10

    # Remove the leading zeroes
    result = result[
        next((i for i, x in enumerate(result) if x != 0), len(result)) :
    ] or [0]

    # Apply the sign to the result
    return [sign * result[0]] + result[1:]


=== Content of /home/sam/github/ml-software-engineers-gym/problems-solving/data-structures-and-algorithms/5-arrays/problem-3/my_solution.py ===

"""
Problem Statement:

Certain applications require arbitrary precision arithmetic. One way to achieve this
is to use arrays to represent integers. Each array entry represents a digit, with the
most significant digit appearing first. A negative leading digit denotes a negative integer.

For example, the sequence [1, 9, 3, 7, 0, 7, 7, 2, 1] represents the number 193707721, and
the sequence [-7, 6, 1, 8, 3, 8, 2, 5, 7, 2, 8, 7] represents the number -761838257287.

The task is to write a program that takes two arrays representing integers and returns
an integer representing their product.

Example:
    If the inputs are [1, 9, 3, 7, 0, 7, 7, 2, 1] and [-7, 6, 1, 8, 3, 8, 2, 5, 7, 2, 8, 7],
    your function should return [-1, 4, 7, 5, 7, 3, 9, 5, 2, 5, 8, 9, 6, 7, 6, 4, 1, 2, 9, 2, 7],
    since 193707721 * -761838257287 = -147573952589676412927.

"""


# CREARE UNA STRUTTURA DELLA REPO CON PROBLEMI E DOMANDE
# RICERCA PACCHETTO O DECORATORE CHE MI DA INDICAZIONE SULLA COMPLESSITA DELLA FUNZIONE
def solution(A, B):
    result = []

    len_iter = min(len(A), len(B))
    report = 0

    for i in range(1, len_iter):
        prod_pos = A[-i] * B[-i]

        units = int(str(prod_pos)[-1])

        temp_result = units + report
        if temp_result > 9:
            report = int(str(temp_result)[:-1])
            units = temp_result[-1]
        else:
            report = 0

        result.extend(temp_result)

    final_result = [int(i) for i in str(report)]
    result = result.reverse()

    final_result.extend(result)
    return final_result


=== Content of /home/sam/github/ml-software-engineers-gym/problems-solving/data-structures-and-algorithms/5-arrays/problem-3/test_helper.py ===

import unittest
from solution import solution as original_solution


class TestMultiplyArrays(unittest.TestCase):
    def setUp(self):
        self.func = original_solution

    def test_given_example(self):
        arr1 = [1, 9, 3, 7, 0, 7, 7, 2, 1]
        arr2 = [-7, 6, 1, 8, 3, 8, 2, 5, 7, 2, 8, 7]
        result = self.func(arr1, arr2)
        self.assertEqual(
            result, [-1, 4, 7, 5, 7, 3, 9, 5, 2, 5, 8, 9, 6, 7, 6, 4, 1, 2, 9, 2, 7]
        )

    def test_both_positive(self):
        arr1 = [1, 2, 3]
        arr2 = [4, 5, 6]
        result = self.func(arr1, arr2)
        self.assertEqual(result, [5, 6, 0, 8, 8])

    def test_both_negative(self):
        arr1 = [-1, 2, 3]
        arr2 = [-4, 5, 6]
        result = self.func(arr1, arr2)
        self.assertEqual(result, [5, 6, 0, 8, 8])

    def test_one_negative(self):
        arr1 = [-1, 2, 3]
        arr2 = [4, 5, 6]
        result = self.func(arr1, arr2)
        self.assertEqual(result, [-5, 6, 0, 8, 8])

    def test_with_zeros(self):
        arr1 = [0]
        arr2 = [1, 2, 3]
        result = self.func(arr1, arr2)
        self.assertEqual(result, [0])

    def test_single_digit_numbers(self):
        arr1 = [5]
        arr2 = [6]
        result = self.func(arr1, arr2)
        self.assertEqual(result, [3, 0])

    def test_one_single_one_multi(self):
        arr1 = [5]
        arr2 = [1, 2, 3]
        result = self.func(arr1, arr2)
        self.assertEqual(result, [6, 1, 5])


if __name__ == "__main__":
    unittest.main()


=== Content of /home/sam/github/ml-software-engineers-gym/problems-solving/data-structures-and-algorithms/5-arrays/problem-2/solution.py ===

"""
Problem Statement:

Write a program that takes an array of digits representing a non-negative decimal integer,
D, as input and updates the array to represent the integer D + 1. The array represents the 
integer with each element being a digit and the most significant digit appearing first.

For example, if the input is [7, 2, 9], the array should be updated to [7, 3, 0] since 729 + 1 = 730.

The algorithm should work even if it is implemented in a language that has finite-precision arithmetic.

Example:
    If the input is [7, 2, 9], your function should update the array to [7, 3, 0].

"""


def plus_one_1(A):
    A[-1] += 1
    for i in reversed(range(1, len(A))):
        if A[i] != 10:
            break
        A[i] = 0
        A[i - 1] += 1
    if A[0] == 10:
        A[0] = 1
        A.append(0)

    print(A)


def plus_one_2(A):
    print("Input: ", A)
    report = 0
    for i in reversed(range(len(A))):
        if A[i] == 9:
            report = 1
            A[i] = 0
        else:
            A[i] = A[i] + report
            if A[i] == 10:
                report = 1
                A[i] = 0
            else:
                break

    print("Output: ", A)


plus_one_1([1, 2, 9])


=== Content of /home/sam/github/ml-software-engineers-gym/problems-solving/data-structures-and-algorithms/5-arrays/problem-1/solution.py ===

"""
Problem Statement:

Imagine you're given an array A and an index i into A. The goal is to rearrange the elements
such that all elements less than A[i] (the "pivot") appear first, followed by elements equal
to the pivot, and then elements greater than the pivot.

The task is to write a program that takes an array and an index as input and rearranges the array
according to the above-mentioned conditions.

Example:
    Given array A = [4, 9, 6, 8, 2, 7] and index i = 2 (A[i] = 6),
    after rearrangement, the array should look something like [4, 2, 6, 9, 8, 7].

Note: The elements can appear in any order within their respective group (i.e., less than, 
equal to, or greater than the pivot).

"""


def dutch_flag_partition_1(pivot_index, A):
    pivot = A[pivot_index]

    print("First pass: group elements smaller than pivot.")
    for i in range(len(A)):
        # Look for a smaller element.
        for j in range(i + 1, len(A)):
            if A[j] < pivot:
                A[i], A[j] = A[j], A[i]
                break

    print("Second pass: group elements larger than pivot.")
    for i in reversed(range(len(A))):
        if A[i] < pivot:
            break
        # Look for a larger element. Stop when we reach an element less than
        # pivot, since first pass has moved them to the start of A.
        for j in reversed(range(i)):
            if A[j] > pivot:
                A[i], A[j] = A[j], A[i]
                break


def dutch_flag_partition_2(pivot_index, A):
    pivot = A[pivot_index]

    smaller = 0
    for i in range(len(A)):
        if A[i] < pivot:
            A[i], A[smaller] = A[smaller], A[i]
            smaller += 1

    larger = len(A) - 1
    for i in reversed(range(len(A))):
        if A[i] < pivot:
            break
        elif A[i] > pivot:
            A[i], A[larger] = A[larger], A[i]
            larger -= 1


def dutch_flag_partition_3(pivot_index, A):
    pivot = A[pivot_index]
    smaller, equal, larger = 0, 0, len(A)

    # Keep iterating as long as there is an unclassified element.

    while equal < larger:
        # A[equal] is the incoming unclassified element.
        if A[equal] < pivot:
            A[smaller], A[equal] = A[equal], A[smaller]
            smaller, equal = smaller + 1, equal + 1
        elif A[equal] == pivot:
            equal += 1
        else:
            # A[equal] > pivot.
            larger -= 1
            A[equal], A[larger] = A[larger], A[equal]


# Test the function
dutch_flag_partition_3(2, [3, 1, 2, 1, 1, 4])
